{"version":3,"sources":["logo-tmdb.svg","services/api.js","pages/main/index.js","components/Header.js","pages/movie/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","API_KEY","Main","state","movies","loadMovies","a","get","response","results","data","setState","this","filme","document","getElementById","value","alert","src","logo","className","title","alt","onClick","getResults","type","name","id","placeholder","onKeyDown","event","key","map","movie","to","poster_path","Component","Header","Movie","credits","props","match","params","nota","vote_average","vote_count","star","note","Math","round","length","push","original_title","overview","Number","budget","toLocaleString","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c60a4a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-tmdb.08392f18.svg\";","import axios from 'axios';\r\n\r\nconst api = axios.create({ baseURL: 'https://api.themoviedb.org/3'});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport './styles.css';\r\nimport logo from '../../logo-tmdb.svg'\r\nimport { Link } from 'react-router-dom';\r\nconst API_KEY = '88a2d92e0c0926858a17bfb99f70cbd6';\r\n \r\nexport default class Main extends Component {\r\n    state = {\r\n        movies: [],\r\n    }\r\n    componentDidMount(){\r\n        this.loadMovies();\r\n    }\r\n    loadMovies = async() => {   \r\n        const response = await api.get(`/trending/movie/day?api_key=${API_KEY}`)\r\n        const { results} = response.data;\r\n        \r\n        this.setState({ movies: results})\r\n    };\r\n\r\n    async getResults(){\r\n\r\n        const filme = document.getElementById('searchbar').value\r\n        if(filme === ''){\r\n            alert('Insira algum valor')\r\n        }else{\r\n            const response = await api.get(`/search/movie?api_key=${API_KEY}&language=pt-BR&query=${filme}`)\r\n            this.setState({ movies: response.data.results })                        \r\n            document.getElementById('searchbar').value = ''\r\n        }\r\n    }\r\n\r\n    render(){\r\n    return (\r\n        <>\r\n        <nav>\r\n            <img src={logo} className='logo-tmdb' title='Home' alt='Logo TMDB' onClick={this.loadMovies}></img>\r\n            <button className='btn-search' onClick={()=>{this.getResults()}} title='Pesquisar'>\r\n                <i className='material-icons'>search</i>\r\n            </button>\r\n            <input type=\"text\" name=\"search\" className=\"searchbar\" id='searchbar' placeholder='Pesquisar...' onKeyDown={(event)=>{\r\n                if(event.key === 'Enter') {this.getResults()}\r\n            }}/>\r\n            \r\n        </nav>\r\n        <div className='trending'>\r\n            {this.state.movies.map(movie => (\r\n                <Link to={`/movie/${movie.id}`} key={movie.id}>\r\n                    <article key={movie.id}>\r\n                        <img src={'https://image.tmdb.org/t/p/w185' + movie.poster_path} title={movie.title} alt={movie.title + ' poster'}></img>\r\n                        {movie.title}\r\n                    </article>\r\n                </Link>\r\n            ))}\r\n        </div>\r\n        </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport logo from '../logo-tmdb.svg'\r\nimport './Header.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Header extends Component{\r\n    render(){\r\n        return(\r\n            <nav>\r\n                <Link to='/movie_page'>\r\n                    <img src={logo} className='logo-tmdb' alt='Logo TMDB'></img>\r\n                </Link>\r\n        </nav>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport './style.css';\r\nimport Header from '../../components/Header'\r\n\r\n\r\nexport default class Movie extends Component{\r\n    state = {\r\n        movie: {},\r\n        credits: {},\r\n    };\r\n\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n\r\n        const response = await api.get(`/movie/${id}?api_key=88a2d92e0c0926858a17bfb99f70cbd6&language=pt-BR`)\r\n        this.setState({ movie: response.data})\r\n    }\r\n    \r\n    render(){\r\n        const { movie } = this.state;\r\n        let nota = movie.vote_average;\r\n        if(movie.vote_average === 0 && movie.vote_count === 0) nota = 'Não Avaliado';\r\n         \r\n        const star = []\r\n        let note = Math.round(nota/2)\r\n        while(star.length<5){\r\n            if(note>0){\r\n                star.push(<span className=\"fa fa-star checked\" key={star}></span>)\r\n                note--\r\n            }else{\r\n                star.push(<span className=\"fa fa-star\" key={star}></span>)\r\n            }\r\n        }\r\n        \r\n        return(\r\n            <>\r\n            <Header />\r\n            <div className='movie'>\r\n                <img src={'https://image.tmdb.org/t/p/w342' + movie.poster_path} alt={movie.title + ' poster'}/>\r\n                <div className='movie-info'>\r\n                    <h1 className='title'>{movie.title}</h1>\r\n                    <h3 className='original-title'>'{   movie.original_title}'</h3>\r\n                    <p>Sinopse:</p> {movie.overview}\r\n\r\n                    <p>Orçamento: US$ {Number(movie.budget).toLocaleString('en-US')}</p>\r\n                    <p>Nota: {nota}</p>\r\n                    <h1>{star}</h1>\r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Main from './pages/main/index';\r\nimport Movie from './pages/movie/index'\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path='/movie_page' component={Main} />\r\n            <Route path='/movie/:id' component={Movie} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\nimport Routes from './routes'\n\nfunction App() {\n  return (\n    <>\n      <Routes />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}